#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>

const uint16_t kIrLedPin = 16; // D0引脚
IRsend irsend(kIrLedPin);

// IR signal data for Power On (GREE AC)
uint16_t rawDataPowerOn[279] = {9046, 4506,  650, 1640,  648, 534,  650, 560,  650, 1640,  648, 534,  650, 560,  650, 534,  648, 534,  650, 1638,  652, 558,  650, 534,  650, 1638,  650, 558,  650, 534,  650, 532,  650, 560,  650, 532,  674, 510,  648, 562,  650, 534,  650, 532,  650, 1664,  650, 532,  650, 534,  652, 558,  648, 534,  650, 534,  648, 562,  650, 1638,  648, 536,  648, 1640,  646, 564,  646, 536,  646, 1642,  646, 564,  648, 20010,  646, 564,  646, 536,  646, 536,  648, 562,  646, 536,  646, 538,  646, 562,  646, 538,  646, 538,  644, 566,  644, 538,  646, 538,  644, 566,  644, 538,  646, 1644,  644, 540,  644, 566,  644, 538,  644, 540,  644, 566,  644, 540,  642, 540,  642, 566,  644, 540,  642, 542,  642, 568,  642, 542,  640, 542,  642, 568,  642, 542,  642, 542,  642, 568,  640, 40042,  9008, 4538,  618, 1650,  638, 592,  618, 566,  616, 1672,  618, 592,  592, 592,  616, 566,  618, 592,  590, 1698,  616, 566,  618, 566,  616, 1698,  618, 566,  616, 568,  616, 594,  616, 566,  616, 566,  616, 594,  616, 568,  616, 568,  616, 594,  616, 1672,  616, 568,  616, 594,  616, 568,  614, 568,  616, 594,  616, 568,  614, 1674,  614, 1674,  616, 1698,  616, 568,  614, 568,  614, 1700,  590, 594,  616, 20042,  616, 594,  614, 568,  616, 568,  614, 594,  614, 568,  616, 568,  614, 596,  614, 570,  614, 570,  614, 596,  614, 568,  614, 568,  614, 596,  614, 572,  612, 568,  614, 596,  614, 570,  614, 570,  614, 596,  614, 570,  614, 570,  614, 596,  614, 570,  612, 570,  612, 598,  612, 570,  612, 572,  612, 598,  612, 572,  610, 572,  612, 1704,  610, 1680,  608};  // GREE Power On

// IR signal data for Power Off (GREE AC)
uint16_t rawDataPowerOff[279] = {9046, 4506,  650, 1640,  652, 532,  650, 558,  650, 534,  650, 534,  648, 562,  650, 534,  648, 536,  648, 1666,  648, 534,  650, 534,  650, 1638,  650, 560,  648, 536,  648, 534,  650, 560,  648, 534,  652, 532,  650, 560,  648, 534,  650, 534,  648, 1666,  650, 534,  650, 534,  648, 562,  652, 532,  650, 534,  650, 560,  652, 1638,  650, 534,  650, 1664,  652, 532,  650, 534,  650, 1640,  650, 560,  650, 20010,  648, 560,  648, 536,  648, 536,  648, 562,  648, 536,  648, 536,  648, 562,  644, 538,  646, 538,  646, 564,  646, 536,  646, 538,  646, 564,  646, 536,  646, 1642,  646, 564,  646, 538,  644, 538,  644, 566,  644, 538,  646, 538,  644, 566,  644, 538,  644, 540,  642, 568,  642, 540,  644, 540,  642, 566,  644, 540,  642, 540,  642, 566,  644, 1646,  642, 40042,  9012, 4516,  642, 1648,  640, 570,  640, 544,  640, 544,  640, 570,  640, 544,  640, 544,  640, 570,  640, 1650,  638, 566,  618, 572,  612, 1696,  618, 566,  618, 566,  618, 592,  616, 566,  618, 566,  618, 592,  620, 564,  618, 566,  616, 592,  618, 1672,  616, 566,  616, 592,  618, 566,  618, 566,  616, 592,  618, 566,  618, 1672,  616, 1672,  616, 1700,  616, 568,  616, 568,  616, 1700,  618, 592,  616, 20042,  616, 594,  614, 568,  616, 568,  614, 594,  614, 568,  616, 568,  614, 596,  614, 570,  614, 570,  614, 596,  614, 568,  614, 568,  614, 596,  614, 572,  612, 568,  614, 596,  614, 570,  614, 570,  614, 596,  614, 570,  614, 570,  614, 596,  614, 570,  612, 570,  612, 598,  612, 570,  612, 572,  612, 598,  612, 572,  610, 572,  612, 1704,  610, 1680,  608};  // GREE Power Off

bool isPowerOn = false;  // Track current state (on/off)

void setup() {
  Serial.begin(115200);
  irsend.begin();  // Initialize IR sender
}

void loop() {
  if (isPowerOn) {
    // Send power off signal
    irsend.sendRaw(rawDataPowerOff, 279, 38); 
    Serial.println("Sending Power Off Signal");
  } else {
    // Send power on signal
    irsend.sendRaw(rawDataPowerOn, 279, 38);
    Serial.println("Sending Power On Signal");
  }
  
  // Toggle state for next iteration
  isPowerOn = !isPowerOn;
  delay(5000);  // Wait 5 seconds before sending next signal
}
